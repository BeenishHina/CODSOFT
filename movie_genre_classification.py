# -*- coding: utf-8 -*-
"""MOVIE GENRE CLASSIFICATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HVie2ZpKO4u9I99sv7Cu5Uchn1B38thZ

**Task_1 done
MOVIE GENRE CLASSIFICATION**
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import MaxAbsScaler
import matplotlib.pyplot as plt

# Function to parse the training data
def parse_data(file_path):
    data = []
    with open(file_path, 'r') as file:
        lines = file.readlines()
        for line in lines:
            parts = line.strip().split(' ::: ')
            if len(parts) == 4:
                movie_id, title, genre, plot = parts
                data.append({'movie_id': movie_id, 'title': title, 'genre': genre, 'plot': plot})
    return pd.DataFrame(data)

# Load and parse the training data
train_data_path = '/content/drive/MyDrive/Movie_Genre_dataset/train_data.txt'
train_df = parse_data(train_data_path)

# Preprocess text data: Convert plot summaries into TF-IDF features
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X = tfidf_vectorizer.fit_transform(train_df['plot'])
y = train_df['genre']

# Split the data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a classifier (Logistic Regression) with a pipeline including scaling with MaxAbsScaler
pipeline = Pipeline([
    ('scaler', MaxAbsScaler()),
    ('classifier', LogisticRegression(max_iter=1000, solver='saga'))
])

pipeline.fit(X_train, y_train)

# Model Evaluation
y_pred = pipeline.predict(X_val)
accuracy = accuracy_score(y_val, y_pred)
report = classification_report(y_val, y_pred)

print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(report)

# Plotting histograms of actual and predicted genres
fig, ax = plt.subplots(1, 2, figsize=(14, 6), sharey=True)

# Actual genres
y_val.value_counts().plot(kind='bar', ax=ax[0], color='blue')
ax[0].set_title('Actual Genres')
ax[0].set_xlabel('Genre')
ax[0].set_ylabel('Count')

# Predicted genres
pd.Series(y_pred).value_counts().plot(kind='bar', ax=ax[1], color='orange')
ax[1].set_title('Predicted Genres')
ax[1].set_xlabel('Genre')

plt.tight_layout()
plt.show()

